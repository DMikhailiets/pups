{"version":3,"sources":["redux/actions.ts/simpleReducerActions.ts","redux/reducers/simpleReducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["actionsTypes","initialState","data","simpleReducer","state","action","type","SET_DATA","payload","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","App","React","useState","isDarkMode","setIsDarkMode","useThemeSwitcher","switcher","currentTheme","status","themes","className","checked","onChange","isChecked","theme","dark","light","style","width","marginTop","placeholder","process","ReactDOM","render","StrictMode","themeMap","defaultTheme","insertionPoint","document","getElementById"],"mappings":"mIAOYA,E,kEAAAA,K,qBAAAA,M,KAIL,ICNDC,EAA+B,CACnCC,KAAM,MAeOC,EAZY,WAA6E,IAA5EC,EAA2E,uDAAnEH,EAAcI,EAAqD,uCACrG,OAAQA,EAAOC,MACb,KAAKN,EAAaO,SAChB,OAAO,eACFH,EADL,CACYF,KAAMG,EAAOG,UAG3B,QACE,OAAOJ,I,gBCXTK,EAAcC,0BAAgB,CAChCP,kBAUaQ,EAJDC,sBAAYH,EAAaI,8BACnCC,0BAAgBC,O,2DCsBLC,MA7Bf,WAAgB,IAAD,EACuBC,IAAMC,WAD7B,mBACNC,EADM,KACMC,EADN,OAEsCC,6BAA3CC,EAFK,EAELA,SAAUC,EAFL,EAEKA,aAAcC,EAFnB,EAEmBA,OAAQC,EAF3B,EAE2BA,OAQxC,MAAe,YAAXD,EACK,KAIP,kBAAC,IAAD,KACG,yBAAKE,UAAU,gBAChB,qDAA2BH,GAC3B,kBAAC,IAAD,CAAQI,QAASR,EAAYS,SAdb,SAACC,GACnBT,EAAcS,GACdP,EAAS,CAAEQ,MAAOD,EAAYJ,EAAOM,KAAON,EAAOO,WAcjD,kBAAC,IAAD,CACEC,MAAO,CAAEC,MAAO,IAAKC,UAAW,IAChCC,YAAY,qCCnBdX,EAAS,CACbM,KAAK,GAAD,OAAKM,eAAL,mBACJL,MAAM,GAAD,OAAKK,eAAL,qBAGPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,wBAAD,CACEC,SAAUhB,EACViB,aAAa,QACbC,eAAe,0BAGb,kBAAC,IAAD,CAAUhC,MAAOA,GACf,kBAAC,EAAD,SAKRiC,SAASC,eAAe,U","file":"static/js/main.e723a82b.chunk.js","sourcesContent":["export interface setDataActionType {\n  type: string, \n  payload?: any\n}\n\nexport type simpleReducerActionsType = setDataActionType\n\nexport enum actionsTypes {\n  SET_DATA = 'SET_DATA'\n}\n\nexport const setData: (payload: any) => setDataActionType = (payload: any) => ({type: actionsTypes.SET_DATA, payload})","import { actionsTypes, simpleReducerActionsType } from './../actions.ts/simpleReducerActions'\n\ninterface stateInterface {\n  data: any\n}\nconst initialState: stateInterface = {\n  data: null\n}\n\nexport let simpleReducer = (state = initialState, action: simpleReducerActionsType): stateInterface => {\n  switch (action.type){\n    case actionsTypes.SET_DATA: {\n      return {\n        ...state, data: action.payload\n      }\n    }\n    default: \n      return state\n  }\n} \n\nexport default simpleReducer"," \nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { simpleReducer } from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nlet rootReducer = combineReducers({\n  simpleReducer\n})\n\ntype RootReducer = typeof rootReducer\nexport type AppState = ReturnType<RootReducer>\n\nconst store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware(thunkMiddleware)\n  ))\n\nexport default store","import React from \"react\";\nimport \"./App.css\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { Switch, Input, Layout } from \"antd\";\n// import { Route } from 'react-router-dom' \nimport { RootComponent } from './pages/index'\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = React.useState();\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  const toggleTheme = (isChecked: any) => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  if (status === \"loading\") {\n    return null;\n  }\n\n  return (\n    <Layout>\n       <div className=\"main fade-in\">\n      <h1>The current theme is: {currentTheme}</h1>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n\n      <Input\n        style={{ width: 300, marginTop: 30 }}\n        placeholder=\"I will change with the theme!\"\n      />\n    </div>\n    </Layout>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeSwitcherProvider\n      themeMap={themes}\n      defaultTheme=\"light\"\n      insertionPoint=\"styles-insertion-point\"\n    >\n      {/* <BrowserRouter> */}\n        <Provider store={store}>\n          <App/>\n        </Provider>    \n      {/* </BrowserRouter> */}\n    </ThemeSwitcherProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}